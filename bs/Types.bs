MACHINE Types

ATTRIBUTES
	
/*	Define by 653	*/
	
	#define SYSTEM_LIMIT_NUMBER_OF_PARTITIONS 		32 
	#define SYSTEM_LIMIT_NUMBER_OF_MESSAGES 		512 
	#define SYSTEM_LIMIT_MESSAGE_SIZE 				8192 
	#define SYSTEM_LIMIT_NUMBER_OF_PROCESSES 		128 
	#define SYSTEM_LIMIT_NUMBER_OF_SAMPLING_PORTS 	512 
	#define SYSTEM_LIMIT_NUMBER_OF_QUEUING_PORTS 	512 
	#define SYSTEM_LIMIT_NUMBER_OF_BUFFERS 			256 
	#define SYSTEM_LIMIT_NUMBER_OF_BLACKBOARDS 		256 
	#define SYSTEM_LIMIT_NUMBER_OF_SEMAPHORES 		256 
	#define SYSTEM_LIMIT_NUMBER_OF_EVENTS 			256
	#define MAX_NAME_LENGTH 						30 
	#define INFINITE_TIME_VALUE 					-1
	#define MAX_NUMBER_OF_PARTITIONS 				SYSTEM_LIMIT_NUMBER_OF_PARTITIONS
	#define MAX_NUMBER_OF_PROCESSES 				SYSTEM_LIMIT_NUMBER_OF_PROCESSES
	#define MIN_PRIORITY_VALUE 						1
	#define MAX_PRIORITY_VALUE 						239
	#define MAX_LOCK_LEVEL 							16
	#define NULL_PROCESS_ID 						0
	#define MAX_NUMBER_OF_BUFFERS 					SYSTEM_LIMIT_NUMBER_OF_BUFFERS
	#define MAX_NUMBER_OF_BLACKBOARDS 				SYSTEM_LIMIT_NUMBER_OF_BLACKBOARDS
	#define MAX_ERROR_MESSAGE_SIZE 					128
	#define MAX_NUMBER_OF_QUEUING_PORTS 			SYSTEM_LIMIT_NUMBER_OF_QUEUING_PORTS
	#define MAX_NUMBER_OF_SAMPLING_PORTS 			SYSTEM_LIMIT_NUMBER_OF_SAMPLING_PORTS
	#define MAX_NUMBER_OF_SEMAPHORES 				SYSTEM_LIMIT_NUMBER_OF_SEMAPHORES
	#define MAX_SEMAPHORE_VALUE 					32767
	#define MAX_NUMBER_OF_EVENTS 					SYSTEM_LIMIT_NUMBER_OF_EVENTS

/*	Basic type definition	*/

	typedef unsigned char APEX_BYTE; /* 8-bit unsigned */
	typedef long APEX_INTEGER; /* 32-bit signed */
	typedef unsigned long APEX_UNSIGNED; /* 32-bit unsigned */
	
	typedef long long APEX_LONG_INTEGER; /* 64-bit signed */

	typedef
		enum {
			NO_ERROR = 0, /* request valid and operation performed */
			NO_ACTION = 1, /* status of system unaffected by request */
			NOT_AVAILABLE = 2, /* resource required by request unavailable */
			INVALID_PARAM = 3, /* invalid parameter specified in request */
			INVALID_CONFIG = 4, /* parameter incompatible with configuration */
			INVALID_MODE = 5, /* request incompatible with current mode */
			TIMED_OUT = 6 /* time-out tied up with request has expired */
			} RETURN_CODE_TYPE;

	
	typedef char NAME_TYPE_MAX_NAME_LENGTH;
	typedef void (* SYSTEM_ADDRESS_TYPE);
	typedef APEX_BYTE * MESSAGE_ADDR_TYPE;
	typedef APEX_INTEGER MESSAGE_SIZE_TYPE;
	typedef APEX_INTEGER MESSAGE_RANGE_TYPE;
	typedef APEX_INTEGER INDEX_TYPE;
	typedef enum { SOURCE = 0, DESTINATION = 1 } PORT_DIRECTION_TYPE;
	typedef enum { FIFO = 0, PRIORITY = 1 } QUEUING_DISCIPLINE_TYPE;
	typedef APEX_LONG_INTEGER SYSTEM_TIME_TYPE; /* 64-bit signed integer with a 1 nanosecond LSB */
	
	/*	Partition type definition	*/	

	typedef
		enum {
			IDLE = 0,
			COLD_START = 1,
			WARM_START = 2,
			NORMAL = 3
			} OPERATING_MODE_TYPE;

	typedef string NAME_TYPE;
	typedef APEX_INTEGER PARTITION_ID_TYPE;
	typedef NAME_TYPE PARTITION_NAME_TYPE;
	
	
	
	/*	Process type definition 	*/	

	typedef NAME_TYPE PROCESS_NAME_TYPE;
	typedef APEX_INTEGER PROCESS_ID_TYPE;
	typedef APEX_INTEGER LOCK_LEVEL_TYPE;
	typedef APEX_UNSIGNED STACK_SIZE_TYPE;
	typedef APEX_INTEGER WAITING_RANGE_TYPE;
	typedef APEX_INTEGER PRIORITY_TYPE;

	typedef
		enum {
			NORMAL_START = 0,
			PARTITION_RESTART = 1,
			HM_MODULE_RESTART = 2,
			HM_PARTITION_RESTART = 3
			} START_CONDITION_TYPE;

	typedef
		struct {
			SYSTEM_TIME_TYPE PERIOD;
			SYSTEM_TIME_TYPE DURATION;
			PARTITION_ID_TYPE IDENTIFIER;
			LOCK_LEVEL_TYPE LOCK_LEVEL;
			OPERATING_MODE_TYPE OPERATING_MODE;
			START_CONDITION_TYPE START_CONDITION;
			} PARTITION_STATUS_TYPE;
	
	typedef
		struct {
			PARTITION_ID_TYPE ID;
			SYSTEM_ADDRESS_TYPE ENTRY_POINT;
			PARTITION_NAME_TYPE NAME;			
			} PARTITION_TYPE;
			
	typedef
		enum {
			DORMANT = 0,
			READY = 1,
			RUNNING = 2,
			WAITING = 3
			} PROCESS_STATE_TYPE;

	typedef enum { SOFT = 0, HARD = 1 } DEADLINE_TYPE;

	typedef
		struct {
			SYSTEM_TIME_TYPE PERIOD;
			SYSTEM_TIME_TYPE TIME_CAPACITY;
			SYSTEM_ADDRESS_TYPE ENTRY_POINT;
			STACK_SIZE_TYPE STACK_SIZE;
			PRIORITY_TYPE BASE_PRIORITY;
			DEADLINE_TYPE DEADLINE;
			PROCESS_NAME_TYPE NAME;
			} PROCESS_ATTRIBUTE_TYPE;

		

	
	

	typedef
		struct {
			SYSTEM_TIME_TYPE DEADLINE_TIME;
			PRIORITY_TYPE CURRENT_PRIORITY;
			PROCESS_STATE_TYPE PROCESS_STATE;
			PROCESS_ATTRIBUTE_TYPE ATTRS;
			} PROCESS_STATUS_TYPE;

	typedef
		struct {
			PROCESS_ID_TYPE ID;
			PARTITION_ID_TYPE PARID;
			PROCESS_STATUS_TYPE STATUS;
			} PROCESS_TYPE;
			
	STACK_SIZE_TYPE MAX_PROCESS_STACK_SIZE;
	STACK_SIZE_TYPE MIN_PROCESS_STACK_SIZE;
	SYSTEM_TIME_TYPE MAX_PREOCESS_PERIOD;
	SYSTEM_TIME_TYPE MAX_PREOCESS_TIME_CAPACITY;
	SYSTEM_TIME_TYPE MAX_PREOCESS_TIME_OUT;
	SYSTEM_TIME_TYPE MAX_PREOCESS_DELAY_TIME;
	
	PROCESS_ID_TYPE ERROR_HANDLER_PROCESS_ID = 0;
	
/*	Time type definition 	*/
	
	typedef enum { FALSE = 0, TRUE =1 } TIME_OUT_TYPE;
	
	typedef
		struct {
			PROCESS_ID_TYPE ID;
			SYSTEM_TIME_TYPE TIME_OUT;
			TIME_OUT_TYPE TIME_OUT_SIGNAL;
			} TIMER_TYPE;

	SYSTEM_TIME_TYPE MAX_BUDGET_TIME;
	
/*	Buffer type definition	*/

	typedef NAME_TYPE BUFFER_NAME_TYPE;
	typedef APEX_INTEGER BUFFER_ID_TYPE;

	typedef
		struct{
			MESSAGE_ADDR_TYPE MESSAGE_ADDR;
			MESSAGE_SIZE_TYPE LENGTH;
			MESSAGE_ADDR_TYPE NEXT;
			} BUFFER_MESSAGE_TYPE;
			
	typedef
		struct {
			MESSAGE_RANGE_TYPE 		NB_MESSAGE;
			MESSAGE_RANGE_TYPE 		MAX_NB_MESSAGE;
			MESSAGE_SIZE_TYPE 		MAX_MESSAGE_SIZE;
			WAITING_RANGE_TYPE 		WAITING_PROCESSES;
			QUEUING_DISCIPLINE_TYPE QUEUING_DISCIPLINE;
			BUFFER_MESSAGE_TYPE 	FIRST_MESSAGE;
			BUFFER_MESSAGE_TYPE		LAST_MESSAGE;
			INDEX_TYPE				LAST_SEND_INDEX;
			INDEX_TYPE				LAST_RECEIVE_INDEX;
			} BUFFER_STATUS_TYPE;

	typedef
		struct {
			BUFFER_ID_TYPE ID;
			BUFFER_NAME_TYPE NAME;
			BUFFER_STATUS_TYPE STATUS;
			} BUFFER_TYPE;
			
/*	Blackboard type definition	*/

	typedef NAME_TYPE BLACKBOARD_NAME_TYPE;
	typedef APEX_INTEGER BLACKBOARD_ID_TYPE;
	typedef enum { EMPTY = 0, OCCUPIED = 1 } EMPTY_INDICATOR_TYPE;

	typedef
		struct {
			EMPTY_INDICATOR_TYPE EMPTY_INDICATOR;
			MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE;
			WAITING_RANGE_TYPE WAITING_PROCESSES;
			MESSAGE_ADDR_TYPE MESSAGE_ADDR;
			MESSAGE_SIZE_TYPE LENGTH;
			} BLACKBOARD_STATUS_TYPE;
	
	typedef
		struct {
			BLACKBOARD_ID_TYPE ID;
			BLACKBOARD_NAME_TYPE NAME;
			BLACKBOARD_STATUS_TYPE STATUS;
			} BLACKBOARD_TYPE;

/*	Semaphore type definition	*/
	
	typedef NAME_TYPE SEMAPHORE_NAME_TYPE;
	typedef APEX_INTEGER SEMAPHORE_ID_TYPE;
	typedef APEX_INTEGER SEMAPHORE_VALUE_TYPE;

	typedef
		struct {
			SEMAPHORE_VALUE_TYPE 	CURRENT_VALUE;
			SEMAPHORE_VALUE_TYPE 	MAXIMUM_VALUE;
			WAITING_RANGE_TYPE 		WAITING_PROCESSES;
			QUEUING_DISCIPLINE_TYPE QUEUING_DISCIPLINE;
			} SEMAPHORE_STATUS_TYPE;

	typedef
		struct {
			SEMAPHORE_ID_TYPE ID;
			SEMAPHORE_NAME_TYPE NAME;
			SEMAPHORE_STATUS_TYPE STATUS;
			} SEMAPHORE_TYPE;

/*	Event type definition	*/
	
	typedef NAME_TYPE EVENT_NAME_TYPE;
	typedef APEX_INTEGER EVENT_ID_TYPE;
	typedef enum { DOWN = 0, UP = 1 } EVENT_STATE_TYPE;

	typedef
		struct {
			EVENT_STATE_TYPE EVENT_STATE;
			WAITING_RANGE_TYPE WAITING_PROCESSES;
			} EVENT_STATUS_TYPE;

	typedef
		struct {
			EVENT_ID_TYPE ID;
			EVENT_NAME_TYPE NAME;
			EVENT_STATUS_TYPE STATUS;
			} EVENT_STATUSE_TYPE;
			
	typedef
		struct {
			EVENT_ID_TYPE ID;
			EVENT_NAME_TYPE NAME;
			EVENT_STATUS_TYPE STATUS;
			} EVENT_TYPE;

/*	Sampling type definition	*/

	typedef NAME_TYPE SAMPLING_PORT_NAME_TYPE;
	typedef APEX_INTEGER SAMPLING_PORT_ID_TYPE;
	typedef enum { INVALID = 0, VALID = 1 } VALIDITY_TYPE;
	SYSTEM_TIME_TYPE MAX_REFRESH_PERIOD;

	typedef
		struct {
			SYSTEM_TIME_TYPE REFRESH_PERIOD;
			MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE;
			PORT_DIRECTION_TYPE PORT_DIRECTION;
			MESSAGE_ADDR_TYPE MESSAGE_ADDR;
			MESSAGE_SIZE_TYPE LENGTH;
			EMPTY_INDICATOR_TYPE EMPTY_INDICATOR;
			VALIDITY_TYPE LAST_MSG_VALIDITY;
			} SAMPLING_PORT_STATUS_TYPE;
    
	typedef
		struct {
			SAMPLING_PORT_ID_TYPE ID;
			SAMPLING_PORT_NAME_TYPE NAME;
			SAMPLING_PORT_STATUS_TYPE STATUS;
			}SAMPLING_PORT_TYPE;

/*	Queuing type definition	*/
	
	typedef NAME_TYPE QUEUING_PORT_NAME_TYPE;
	typedef APEX_INTEGER QUEUING_PORT_ID_TYPE;
	typedef APEX_INTEGER QUEUEING_MESSAGE_ID_TYPE;
	MESSAGE_RANGE_TYPE QUEUING_MAX_NB_MESSAGE;
	SYSTEM_TIME_TYPE MAX_SEND_QM_TIME_OUT;

	typedef
		struct{
			MESSAGE_ADDR_TYPE MESSAGE_ADDR;
			MESSAGE_SIZE_TYPE LENGTH;
			MESSAGE_ADDR_TYPE NEXT;
			} QUEUING_MESSAGE_TYPE;
			
	typedef
		struct {
			MESSAGE_RANGE_TYPE NB_MESSAGE;
			MESSAGE_RANGE_TYPE MAX_NB_MESSAGE;
			MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE;
			PORT_DIRECTION_TYPE PORT_DIRECTION;
			WAITING_RANGE_TYPE WAITING_PROCESSES;
			QUEUING_MESSAGE_TYPE 	FIRST_MESSAGE;
			QUEUING_MESSAGE_TYPE	LAST_MESSAGE;
			} QUEUING_PORT_STATUS_TYPE;

	typedef
		struct {
			QUEUING_PORT_ID_TYPE ID;
			QUEUING_PORT_NAME_TYPE NAME;
			QUEUING_PORT_STATUS_TYPE STATUS;
			} QUEUING_PORT_TYPE;
			
	typedef
		struct {
			QUEUING_PORT_NAME_TYPE NAME;
			MESSAGE_RANGE_TYPE MAX_NB_MESSAGE;
			MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE;
			PORT_DIRECTION_TYPE PORT_DIRECTION;
			} QUEUING_PORT_CONFIG_TYPE;

			
/*	Error type definition	*/

	typedef APEX_INTEGER ERROR_MESSAGE_SIZE_TYPE;
	typedef APEX_BYTE ERROR_MESSAGE_TYPE_MAX_ERROR_MESSAGE_SIZE_;
	typedef string ERROR_MESSAGE_TYPE;

	typedef
		enum {
			DEADLINE_MISSED = 0,
			APPLICATION_ERROR = 1,
			NUMERIC_ERROR = 2,
			ILLEGAL_REQUEST = 3,
			STACK_OVERFLOW = 4,
			MEMORY_VIOLATION = 5,
			HARDWARE_FAULT = 6,
			POWER_FAIL = 7
			} ERROR_CODE_TYPE;

	typedef
		struct {
			ERROR_CODE_TYPE ERROR_CODE;
			ERROR_MESSAGE_SIZE_TYPE LENGTH;
			PROCESS_ID_TYPE FAILED_PROCESS_ID;
			SYSTEM_ADDRESS_TYPE FAILED_ADDRESS;
			ERROR_MESSAGE_TYPE MESSAGE;
			} ERROR_STATUS_TYPE;
			
/*	Configuration definition	*/
/*
	typedef
		struct {
			name
			partition_id
			duration
			period
			} PARTITION_CONFIG_TYPE

	typedef
		struct {
			partition_id
			size
			name
			accessrights
			} PARTITION_RAM_CONFIG_TYPE
			
	typedef
		struct {
			partition_id
			size
			name
			accessrights
		}PARTITION_FLASH_CONFIG_TYPE
		
	typedef
		struct {
			partition_id
			max_message_size
			name
			max_nb_message
			direction
		}PARTITION_QPort_CONFIG_TYPE
		
	typedef
		struct {
			partition_id
			max_message_size
			name
			direction
		}PARTITION_SPort_CONFIG_TYPE
		*/
	/* need schedules and health monitoring */	
	
	
	typedef
		enum {
			WAIT_BUFFER = 0,
			WAIT_BLACKBOARD = 1,
			WAIT_SEMAPHORE = 2,
			WAIT_EVENT = 3,
			WAIT_QUEUING = 4,
			WAIT_SAMPLING = 5,
			WAIT_TIME = 6
			} WAITING_TYPE;
	
	typedef
		struct {
			PROCESS_ID_TYPE ID;
			PARTITION_ID_TYPE PARID;
			WAITING_TYPE WAIT_FLAG;
			} WAITING_PROCESS_TYPE;
			
	typedef
		struct {
			PROCESS_ID_TYPE ID;
			PARTITION_ID_TYPE PARID;
			} READY_PROCESS_TYPE;	

	typedef
		struct {
			PROCESS_ID_TYPE ID;
			PARTITION_ID_TYPE PARID;
			} RUNNING_PROCESS_TYPE;

	typedef
		struct {
			PROCESS_ID_TYPE ID;
			PARTITION_ID_TYPE PARID;
			} DORMANT_PROCESS_TYPE;

	typedef
		struct {
			PROCESS_ID_TYPE ID;
			SEMAPHORE_ID_TYPE SEMAPHORE_ID;
			} WAITING_SEMAPHORE_TYPE;
			
	typedef
		struct {
			PROCESS_ID_TYPE ID;
			BLACKBOARD_ID_TYPE BLACKBOARD_ID;
			} WAITING_BLACKBOARD_TYPE;
	
	typedef
		struct {
			PROCESS_ID_TYPE ID;
			EVENT_ID_TYPE EVENT_ID;
			} WAITING_EVENT_TYPE;
	
	typedef enum { SENDING = 0, RECEIVING = 1 } BUFFER_WAITING_TYPE;
	
	typedef
		struct {
			PROCESS_ID_TYPE 	ID;
			BUFFER_ID_TYPE 		BUFFER_ID;
			BUFFER_WAITING_TYPE WAIT_TYPE;
			MESSAGE_ADDR_TYPE 	MESSAGE_ADDR;
			MESSAGE_SIZE_TYPE 	LENGTH;
			INDEX_TYPE			INDEX;
			} WAITING_BUFFER_TYPE;
	
	typedef int SAMPLING_ID_TYPE;
	typedef 
		struct {
			PROCESS_ID_TYPE ID;
			SAMPLING_ID_TYPE SAMPLING_ID;
			} WAITING_SAMPLING_TYPE;
	
	typedef int QUEUING_ID_TYPE;
	typedef
		struct {
			PROCESS_ID_TYPE ID;
			QUEUING_ID_TYPE QUEUING_ID;
			} WAITING_QUEUING_TYPE;
			
	typedef int TIMER_ID_TYPE;
	typedef
		struct {
			PROCESS_ID_TYPE ID;
			TIMER_ID_TYPE TIMER_ID;
			} WAITING_TIMER_TYPE;



END
